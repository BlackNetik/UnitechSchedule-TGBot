# handlers.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from datetime import datetime
import traceback

from config import BOT_VERSION, LAST_UPDATED, FEEDBACK_WAITING, DAY_SELECTION
from utils import load_users, save_users, MSK, logger
from keyboards import get_menu_keyboard, get_schedule_keyboard, get_day_selection_keyboard
from schedule import download_ics, parse_ics, get_today_schedule, get_tomorrow_schedule, get_week_schedule, get_next_week_schedule, get_day_schedule
from get_student_id import get_schedule

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_key = f"{update.effective_chat.id}"
    users_data = load_users()
    if chat_key not in users_data:
        users_data[chat_key] = {'id_student': 90893}
        save_users(users_data)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏–º. –ê.–ê. –õ–µ–æ–Ω–æ–≤–∞ —Å –ø–æ—Ä—Ç–∞–ª–∞ Unitech!\n'
        '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –ü–ò-23. –•–æ—á–µ—à—å –¥—Ä—É–≥—É—é? –ò—Å–ø–æ–ª—å–∑—É–π /change <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /change –ü–ò-23).\n'
        '–í—ã–±–∏—Ä–∞–π –æ–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã: /today, /tomorrow, /week, /next_week, /day, /info, /feedback.',
        reply_markup=get_menu_keyboard()
    )
    logger.info("sent start menu", extra={
        'user_id': update.effective_user.id,
        'chat_id': update.effective_chat.id,
        'username': update.effective_user.username or 'unknown'
    })

async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ—Ä—Ç–∞–ª–∞ Unitech.\n"
        f"–ë–æ—Ç –±—ã–ª –Ω–∞–ø–∏—Å–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ú–û–†–° —Å –ø–æ–º–æ—â—å—é AI Grok\n"
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /change <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã> –¥–ª—è —Å–º–µ–Ω—ã.\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 01.09.2025. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {BOT_VERSION} –æ—Ç {LAST_UPDATED}\n"
        f"\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/today ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        f"/tomorrow ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n"
        f"/week ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
        f"/next_week ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n"
        f"/day <–Ω–æ–º–µ—Ä_–¥–Ω—è> ‚Äî —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞\n"
        f"/change ‚Äî —Å–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã\n"
        f"/feedback ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É",
        reply_markup=get_menu_keyboard()
    )
    logger.info("sent info", extra={
        'user_id': update.effective_user.id,
        'chat_id': update.effective_chat.id,
        'username': update.effective_user.username or 'unknown'
    })

async def change_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_key = f"{update.effective_chat.id}"
    users_data = load_users()
    if len(context.args) < 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /change <–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã> (–Ω–∞–ø—Ä–∏–º–µ—Ä, /change –ü–ò-23)"
        )
        logger.info("invalid /change command: no group name provided", extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
        return
    
    group_name = ' '.join(context.args)
    try:
        student_id = get_schedule(group_name)
        if not student_id:
            await update.message.reply_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É '{group_name}' –∏–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –Ω–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_menu_keyboard()
            )
            logger.info("failed to find group or student for group: %s", group_name, extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
            return
    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if "504" in str(e):
            error_message = "–°–µ—Ä–≤–µ—Ä Unitech –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ 504). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        logger.info("failed to find group or student for group %s: %s", group_name, str(e), extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
        await update.message.reply_text(
            error_message,
            reply_markup=get_menu_keyboard()
        )
        return
    
    users_data[chat_key] = users_data.get(chat_key, {})
    users_data[chat_key]["id_student"] = student_id
    users_data[chat_key]["group_name"] = group_name
    save_users(users_data)
    await update.message.reply_text(
        f"–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {group_name} (ID —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_id})",
        reply_markup=get_menu_keyboard()
    )
    logger.info("changed group to %s (student ID: %s)", group_name, student_id, extra={
        'user_id': update.effective_user.id,
        'chat_id': update.effective_chat.id,
        'username': update.effective_user.username or 'unknown'
    })

async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        try:
            if update.callback_query.message:
                await update.callback_query.message.delete()
        except Exception as e:
            logger.warning("failed to delete message in feedback_start: %s", str(e), extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
    
    try:
        await (update.message or update.callback_query.message).reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."
        )
    except Exception as e:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."
        )
        logger.warning("failed to send feedback prompt: %s", str(e), extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
    
    logger.info("requested feedback message", extra={
        'user_id': update.effective_user.id,
        'chat_id': update.effective_chat.id,
        'username': update.effective_user.username or 'unknown'
    })
    return FEEDBACK_WAITING

async def feedback_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or update.message.text.strip() == "":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)."
        )
        return FEEDBACK_WAITING
    
    feedback_message = update.message.text
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
        reply_markup=get_menu_keyboard()
    )
    logger.info("received feedback: %s", feedback_message, extra={
        'user_id': update.effective_user.id,
        'chat_id': update.effective_chat.id,
        'username': update.effective_user.username or 'unknown'
    })
    return ConversationHandler.END

async def feedback_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_menu_keyboard()
    )
    logger.info("feedback cancelled", extra={
        'user_id': update.effective_user.id,
        'chat_id': update.effective_chat.id,
        'username': update.effective_user.username or 'unknown'
    })
    return ConversationHandler.END

async def day_selection_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        try:
            if update.callback_query.message:
                await update.callback_query.message.delete()
        except Exception as e:
            logger.warning("failed to delete message in day_selection_start: %s", str(e), extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
    
    try:
        await (update.message or update.callback_query.message).reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞:",
            reply_markup=get_day_selection_keyboard(page=0)
        )
    except Exception as e:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞:",
            reply_markup=get_day_selection_keyboard(page=0)
        )
        logger.warning("failed to send day selection prompt: %s", str(e), extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
    
    logger.info("started day selection", extra={
        'user_id': update.effective_user.id,
        'chat_id': update.effective_chat.id,
        'username': update.effective_user.username or 'unknown'
    })
    return DAY_SELECTION

async def day_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("day_page_"):
        page = int(query.data.split("_")[-1])
        try:
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞:",
                reply_markup=get_day_selection_keyboard(page=page)
            )
        except Exception as e:
            logger.warning("failed to edit day selection message: %s", str(e), extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞:",
                reply_markup=get_day_selection_keyboard(page=page)
            )
        return DAY_SELECTION
    
    elif query.data.startswith("day_select_"):
        day = int(query.data.split("_")[-1])
        context.args = [str(day)]
        await day_command(update, context, query.message.chat_id)
        return ConversationHandler.END
    
    elif query.data == "menu":
        try:
            await query.message.edit_text(
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_menu_keyboard()
            )
        except Exception as e:
            logger.warning("failed to edit message to menu: %s", str(e), extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_menu_keyboard()
            )
        logger.info("returned to menu from day selection", extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
        return ConversationHandler.END

async def day_selection_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        day = int(update.message.text.strip())
        context.args = [str(day)]
        await day_command(update, context, update.message.chat_id)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–Ω—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17).",
            reply_markup=get_day_selection_keyboard(page=0)
        )
        logger.info("invalid day selection text: non-numeric input", extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
        return DAY_SELECTION

async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_key = f"{update.effective_chat.id}"
    users_data = load_users()
    student_id = users_data.get(chat_key, {}).get('id_student', 90893)
    
    try:
        ics_content = download_ics(student_id)
        events = parse_ics(ics_content)
        schedule, _ = get_today_schedule(events)
        await update.message.reply_text(
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{schedule}",
            reply_markup=get_schedule_keyboard(exclude="today")
        )
        logger.info("sent today's schedule", extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if "504" in str(e):
            error_message = "–°–µ—Ä–≤–µ—Ä Unitech –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ 504). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        elif "Read timeout" in str(e):
            error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Unitech –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        await update.message.reply_text(
            error_message,
            reply_markup=get_schedule_keyboard(show_menu_button=True)
        )
        logger.error("failed to fetch today's schedule: %s", str(e), extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })

async def tomorrow_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_key = f"{update.effective_chat.id}"
    users_data = load_users()
    student_id = users_data.get(chat_key, {}).get('id_student', 90893)
    
    try:
        ics_content = download_ics(student_id)
        events = parse_ics(ics_content)
        schedule, _ = get_tomorrow_schedule(events)
        await update.message.reply_text(
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{schedule}",
            reply_markup=get_schedule_keyboard(exclude="tomorrow")
        )
        logger.info("sent tomorrow's schedule", extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if "504" in str(e):
            error_message = "–°–µ—Ä–≤–µ—Ä Unitech –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ 504). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        elif "Read timeout" in str(e):
            error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Unitech –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        await update.message.reply_text(
            error_message,
            reply_markup=get_schedule_keyboard(show_menu_button=True)
        )
        logger.error("failed to fetch tomorrow's schedule: %s", str(e), extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })

async def week_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_key = f"{update.effective_chat.id}"
    users_data = load_users()
    student_id = users_data.get(chat_key, {}).get('id_student', 90893)
    
    try:
        ics_content = download_ics(student_id)
        events = parse_ics(ics_content)
        schedule, _ = get_week_schedule(events)
        await update.message.reply_text(
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n{schedule}",
            reply_markup=get_schedule_keyboard(exclude="week")
        )
        logger.info("sent week's schedule", extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if "504" in str(e):
            error_message = "–°–µ—Ä–≤–µ—Ä Unitech –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ 504). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        elif "Read timeout" in str(e):
            error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Unitech –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        await update.message.reply_text(
            error_message,
            reply_markup=get_schedule_keyboard(show_menu_button=True)
        )
        logger.error("failed to fetch week's schedule: %s", str(e), extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })

async def next_week_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_key = f"{update.effective_chat.id}"
    users_data = load_users()
    student_id = users_data.get(chat_key, {}).get('id_student', 90893)
    
    try:
        ics_content = download_ics(student_id)
        events = parse_ics(ics_content)
        schedule, _ = get_next_week_schedule(events)
        await update.message.reply_text(
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:\n{schedule}",
            reply_markup=get_schedule_keyboard(exclude="next_week")
        )
        logger.info("sent next week's schedule", extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if "504" in str(e):
            error_message = "–°–µ—Ä–≤–µ—Ä Unitech –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ 504). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        elif "Read timeout" in str(e):
            error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Unitech –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        await update.message.reply_text(
            error_message,
            reply_markup=get_schedule_keyboard(show_menu_button=True)
        )
        logger.error("failed to fetch next week's schedule: %s", str(e), extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })

async def day_command(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    chat_key = f"{chat_id}"
    users_data = load_users()
    student_id = users_data.get(chat_key, {}).get('id_student', 90893)
    
    if len(context.args) < 1:
        try:
            await (update.message or update.callback_query.message).reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞:",
                reply_markup=get_day_selection_keyboard(page=0)
            )
        except Exception as e:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞:",
                reply_markup=get_day_selection_keyboard(page=0)
            )
            logger.warning("failed to send day selection prompt in day_command: %s", str(e), extra={
                'user_id': update.effective_user.id,
                'chat_id': chat_id,
                'username': update.effective_user.username or 'unknown'
            })
        logger.info("day command without arguments, showing day selection", extra={
            'user_id': update.effective_user.id,
            'chat_id': chat_id,
            'username': update.effective_user.username or 'unknown'
        })
        return DAY_SELECTION
    
    try:
        day = int(context.args[0])
        ics_content = download_ics(student_id)
        events = parse_ics(ics_content)
        schedule, _ = get_day_schedule(events, day)
        try:
            await (update.message or update.callback_query.message).reply_text(
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} —á–∏—Å–ª–æ:\n{schedule}",
                reply_markup=get_schedule_keyboard(exclude="day")
            )
        except Exception as e:
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} —á–∏—Å–ª–æ:\n{schedule}",
                reply_markup=get_schedule_keyboard(exclude="day")
            )
            logger.warning("failed to reply in day_command, sent new message: %s", str(e), extra={
                'user_id': update.effective_user.id,
                'chat_id': chat_id,
                'username': update.effective_user.username or 'unknown'
            })
        logger.info("sent schedule for day %s", day, extra={
            'user_id': update.effective_user.id,
            'chat_id': chat_id,
            'username': update.effective_user.username or 'unknown'
        })
    except ValueError:
        try:
            await (update.message or update.callback_query.message).reply_text(
                "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–Ω—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, /day 17)",
                reply_markup=get_day_selection_keyboard(page=0)
            )
        except Exception as e:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–Ω—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, /day 17)",
                reply_markup=get_day_selection_keyboard(page=0)
            )
            logger.warning("failed to reply in day_command for ValueError, sent new message: %s", str(e), extra={
                'user_id': update.effective_user.id,
                'chat_id': chat_id,
                'username': update.effective_user.username or 'unknown'
            })
        logger.info("invalid day command: non-numeric day provided", extra={
            'user_id': update.effective_user.id,
            'chat_id': chat_id,
            'username': update.effective_user.username or 'unknown'
        })
    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if "504" in str(e):
            error_message = "–°–µ—Ä–≤–µ—Ä Unitech –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ 504). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        elif "Read timeout" in str(e):
            error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Unitech –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        try:
            await (update.message or update.callback_query.message).reply_text(
                error_message,
                reply_markup=get_schedule_keyboard(show_menu_button=True)
            )
        except Exception as e:
            await context.bot.send_message(
                chat_id=chat_id,
                text=error_message,
                reply_markup=get_schedule_keyboard(show_menu_button=True)
            )
            logger.warning("failed to reply in day_command for error, sent new message: %s", str(e), extra={
                'user_id': update.effective_user.id,
                'chat_id': chat_id,
                'username': update.effective_user.username or 'unknown'
            })
        logger.error("failed to fetch day schedule: %s", str(e), extra={
            'user_id': update.effective_user.id,
            'chat_id': chat_id,
            'username': update.effective_user.username or 'unknown'
        })

async def send_message(query, context, text, reply_markup=None):
    try:
        await query.message.reply_text(text, reply_markup=reply_markup)
    except Exception as e:
        logger.warning("failed to reply to message: %s, sending new message", str(e), extra={
            'user_id': query.from_user.id,
            'chat_id': query.message.chat_id,
            'username': query.from_user.username or 'unknown'
        })
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=text,
            reply_markup=reply_markup
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        if query.message:
            await query.message.delete()
    except Exception as e:
        logger.warning("failed to delete message in handle_callback: %s", str(e), extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })

    if query.data == "menu":
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_menu_keyboard()
            )
        except Exception as e:
            logger.warning("failed to send menu message: %s", str(e), extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
        logger.info("returned to menu via callback", extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
        return
    
    chat_key = f"{update.effective_chat.id}"
    users_data = load_users()
    student_id = users_data.get(chat_key, {}).get('id_student', 90893)
    
    try:
        ics_content = download_ics(student_id)
        events = parse_ics(ics_content)
        
        if query.data == "today":
            schedule, _ = get_today_schedule(events)
            await send_message(
                query, context,
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{schedule}",
                reply_markup=get_schedule_keyboard(exclude="today")
            )
            logger.info("sent today's schedule via callback", extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
        elif query.data == "tomorrow":
            schedule, _ = get_tomorrow_schedule(events)
            await send_message(
                query, context,
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n{schedule}",
                reply_markup=get_schedule_keyboard(exclude="tomorrow")
            )
            logger.info("sent tomorrow's schedule via callback", extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
        elif query.data == "week":
            schedule, _ = get_week_schedule(events)
            await send_message(
                query, context,
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n{schedule}",
                reply_markup=get_schedule_keyboard(exclude="week")
            )
            logger.info("sent week's schedule via callback", extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
        elif query.data == "next_week":
            schedule, _ = get_next_week_schedule(events)
            await send_message(
                query, context,
                f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:\n{schedule}",
                reply_markup=get_schedule_keyboard(exclude="next_week")
            )
            logger.info("sent next week's schedule via callback", extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        if "504" in str(e):
            error_message = "–°–µ—Ä–≤–µ—Ä Unitech –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ 504). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        elif "Read timeout" in str(e):
            error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Unitech –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        await send_message(
            query, context,
            error_message,
            reply_markup=get_schedule_keyboard(show_menu_button=True)
        )
        logger.error("failed to process callback %s: %s", query.data, str(e), extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if update.effective_chat.type in ['group', 'supergroup']:
        bot_username = (await context.bot.get_me()).username
        if not (text.startswith(bot_username) or (update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id)):
            return
        text = text.replace(bot_username, '').strip()
    
    if text in ["–†–∞—Å–ø. –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"]:
        await today_command(update, context)
    elif text in ["–†–∞—Å–ø. –Ω–∞ –∑–∞–≤—Ç—Ä–∞", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"]:
        await tomorrow_command(update, context)
    elif text in ["–†–∞—Å–ø. –Ω–∞ –Ω–µ–¥–µ–ª—é", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"]:
        await week_command(update, context)
    elif text in ["–†–∞—Å–ø. –Ω–∞ —Å–ª–µ–¥. –Ω–µ–¥–µ–ª—é", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"]:
        await next_week_command(update, context)
    elif text.startswith("–†–∞—Å–ø. –Ω–∞ –¥–µ–Ω—å ") or text.startswith("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å "):
        try:
            day = int(text.split()[-1])
            context.args = [str(day)]
            await day_command(update, context, update.message.chat_id)
        except ValueError:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –¥–Ω—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–∞—Å–ø. –Ω–∞ –¥–µ–Ω—å 17)",
                reply_markup=get_day_selection_keyboard(page=0)
            )
            logger.info("invalid text day command: non-numeric day provided", extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /today, /tomorrow, /week, /next_week, /day, /info, /feedback.",
            reply_markup=get_menu_keyboard()
        )
        logger.info("received invalid text: %s", text, extra={
            'user_id': update.effective_user.id,
            'chat_id': update.effective_chat.id,
            'username': update.effective_user.username or 'unknown'
        })
    logger.info("processed text: %s", text, extra={
        'user_id': update.effective_user.id,
        'chat_id': update.effective_chat.id,
        'username': update.effective_user.username or 'unknown'
    })

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    error_str = str(context.error) if context.error else "None"
    if "504" in error_str:
        error_message = "–°–µ—Ä–≤–µ—Ä Unitech –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—à–∏–±–∫–∞ 504). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    elif "Read timeout" in error_str:
        error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Unitech –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    elif "Message to be replied not found" in error_str:
        error_message = "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    
    logger.error("error occurred: %s\n%s", error_str, traceback.format_exc(), extra={
        'user_id': update.effective_user.id if update else 'unknown',
        'chat_id': update.effective_chat.id if update else 'unknown',
        'username': update.effective_user.username or 'unknown' if update else 'unknown'
    })
    
    if update and (update.message or update.callback_query):
        try:
            await (update.message or update.callback_query.message).reply_text(
                error_message,
                reply_markup=get_schedule_keyboard(show_menu_button=True)
            )
        except Exception as e:
            logger.error("failed to send error message: %s", str(e), extra={
                'user_id': update.effective_user.id,
                'chat_id': update.effective_chat.id,
                'username': update.effective_user.username or 'unknown'
            })
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_message,
                reply_markup=get_schedule_keyboard(show_menu_button=True)
            )